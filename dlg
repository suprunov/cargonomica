#!/bin/bash

# sudo apt-get update && sudo apt-get install -y dialog && curl -sSL https://raw.githubusercontent.com/suprunov/envmaker/refs/heads/master/dlg | bash

LOG_FILE=~/installer.log
echo "Начало установки" > "$LOG_FILE"

USERNAME=$USER
NAME="Your name"
EMAIL="${USERNAME}@cargonomica.com"
LOCAL_MYSQL_USER="$USERNAME"
LOCAL_MYSQL_PASSWORD="qazqaz012"
LOCAL_PGSQL_USER="$USERNAME"
LOCAL_PGSQL_PASSWORD="qazqaz012"

declare -A BASIC_DEPS=(
    ["php"]="Основной пакет интерпретатора PHP."
    ["nodejs"]="JavaScript-движок для серверного программирования."
    ["mysql"]="Система управления базами данных (СУБД)."
    ["postgresql"]="Расширенная реляционная СУБД с поддержкой SQL."
    ["curl"]="Инструмент для работы с URL и HTTP-запросами."
    ["git"]="Система контроля версий для управления кодом."
    ["unzip"]="Утилита для распаковки ZIP-архивов."
    ["wget"]="Инструмент для загрузки файлов по HTTP, HTTPS и FTP."
    ["apache2"]="Веб-сервер для хостинга веб-приложений."
    ["software-properties-common"]="Утилиты для управления PPA и репозиториями."
    ["lsb-release"]="Информация о версии дистрибутива Linux."
    ["apt-transport-https"]="Поддержка HTTPS в apt."
    ["mc"]="Midnight Commander, текстовый файловый менеджер."
    ["nginx"]="Высокопроизводительный веб-сервер и реверс-прокси."
    ["redis-server"]="Сервер in-memory базы данных Redis."
    ["composer"]="Управление зависимостями для PHP-проектов."
    ["logrotate"]="Утилита для управления логами системы."
    ["supervisor"]="Управление процессами и демонами."
    ["rsync"]="Инструмент для синхронизации файлов и каталогов."
    ["inotify-tools"]="Инструменты для мониторинга файловых систем."
    ["gawk"]="Расширенная версия AWK для обработки текстов."
    ["wslu"]="Утилиты для работы с Windows Subsystem for Linux."
    ["sshpass"]="Утилита для передачи паролей в SSH."
    ["msmtp"]="SMTP-клиент для отправки электронных писем."
    ["sshfs"]="Файловая система для монтирования удаленных каталогов по SSH."
)

declare -A PHP_DEPS=(
    ["php-fpm"]="Менеджер процессов для PHP, улучшает производительность."
    ["php-cli"]="Интерфейс командной строки для запуска PHP-скриптов."
    ["php-mysql"]="Модуль для работы с базами данных MySQL."
    ["php-pgsql"]="Модуль для работы с PostgreSQL."
    ["php-redis"]="Модуль для работы с Redis, in-memory хранилище."
    ["php-xml"]="Библиотека для работы с XML-данными."
    ["php-mbstring"]="Работа с многобайтовыми строками (UTF-8)."
    ["php-zip"]="Модуль для работы с ZIP-архивами."
    ["php-curl"]="Модуль для HTTP-запросов с помощью CURL."
    ["php-gd"]="Библиотека для работы с изображениями."
    ["php-soap"]="Модуль для работы с SOAP веб-сервисами."
    ["php-intl"]="Интернационализация (форматы дат и чисел)."
    ["php-bcmath"]="Интернационализация (форматы дат и чисел)."
    ["php-opcache"]="Кэширование байт-кода PHP для ускорения."
    ["php-imap"]="Работа с почтовыми протоколами IMAP."
    ["php-xdebug"]="Расширение для отладки PHP-приложений."
    ["php-ldap"]="Работа с LDAP (каталоги и аутентификация)."
)

declare -A NODE_DEPS=(
      ["yarn"]="Менеджер пакетов для JavaScript."
      ["vite"]="Сборщик и сервер для фронтенд-разработки."
      ["pm2"]="Процессный менеджер для Node.js приложений."
      ["postgresql"]="Система управления реляционными базами данных."
      ["sequelize"]="ORM для работы с SQL-базами данных."
      ["nodemon"]="Утилита для автоматической перезагрузки Node.js приложений."
      ["mysql"]="Система управления реляционными базами данных."
      ["husky"]="Инструменты для работы с git-хуками."
)

declare -A PHP_VERSIONS=(
      ["8.2"]="PHP 8.2"
      ["8.3"]="PHP 8.3"
)

declare -A NODE_VERSIONS=(
      ["20"]="Node.js v20.x"
      ["22"]="Node.js v22.x"
      ["21"]="Node.js v21.x"
      ["23"]="Node.js v23.x"
)


log() { # Функция для логирования сообщений с указанием уровня
    local message="$1"
    local timestamp
    timestamp=$(date "+%Y-%m-%d %H:%M:%S")
    echo "$timestamp: $message" >> "$LOG_FILE"
}

select_group() {
    local title="$1"
    local deps
    declare -n deps="$2"
    local order=()
    local options=()
    for key in "${!deps[@]}"; do
        order+=("$key")
    done
    IFS=$'\n' read -r -d '' -a sorted_keys < <(printf '%s\n' "${order[@]}" | sort -z)
    unset IFS
    for key in "${sorted_keys[@]}"; do
        options+=("$key" "${deps[$key]}" "on")
    done
    if ! selected=$(dialog --checklist "$title" 20 60 12 "${options[@]}" --stdout); then
        echo ""
        return 0
    fi
    IFS=' ' read -r -a selected_keys <<< "$selected"
    local ordered_selected_keys=()
    for key in "${sorted_keys[@]}"; do
        if [[ " ${selected_keys[*]} " == *" $key "* ]]; then
            ordered_selected_keys+=("$key")
        fi
    done
    echo "${ordered_selected_keys[@]}"
}

select_item() {
    local title="$1"
    local -n items="$2"
    local default_key="$3"
    options=()
    keys=("${!items[@]}")
    for ((i=${#keys[@]}-1; i>=0; i--)); do
        key="${keys[i]}"
        if [[ "$key" == "$default_key" ]]; then
            options+=("$key" "${items[$key]}" "on")
        else
            options+=("$key" "${items[$key]}" "")
        fi
    done
    selection=$(dialog --title "$title" --radiolist "Выберите элемент:" 15 50 10 "${options[@]}" 3>&1 1>&2 2>&3)

    if [ $? -eq 0 ]; then
        echo "$selection"
    else
        echo ""
    fi
}

calculate_dimensions() {
    local title="$1"
    local content="$2"
    local screen_width
    local max_width
    local width
    local height
    local max_length
    screen_width=$(tput cols)
    max_width=$((screen_width * 80 / 100))
    max_length=$(echo -e "$title\n$content" | awk '{print length}' | sort -n | tail -n 1)
    width=$((max_length + 4))
    width=$((width < max_width ? width : max_width))
    height=10
    echo "$width $height"
}

show_msg() { # Функция для отображения сообщения
    local title="$1"
    local message="$2"
    read -r width height < <(calculate_dimensions "$title" "$message")
    dialog --msgbox "$message" "$height" "$width"
}

get_bool() { # Функция для получения булевого значения (true/false)
    local question="$1"
    if dialog --yesno "$question" 10 30; then
        echo true  # Возвращаем "true", если нажата кнопка "Да"
    else
        echo false # Возвращаем "false", если нажата кнопка "Нет" или окно закрыто
    fi
}

get_value() { # Функция для получения значения от пользователя
    local title="$1"
    local default_value="$2"
    local value
    if [[ -n "$default_value" ]]; then
        value=$(dialog --inputbox "$title" 10 50 "$default_value" 3>&1 1>&2 2>&3)
    else
        value=$(dialog --inputbox "$title" 10 50 3>&1 1>&2 2>&3)
    fi
    if [[ -n "$value" ]]; then
        echo "$value"
    else
        echo ""
    fi
}

get_password() { # Функция для получения пароля
    local title="$1"
    local default_value="$2"
    local password
    if [[ -n "$default_value" ]]; then
        password=$(dialog --passwordbox "$title" 10 50 "$default_value" 3>&1 1>&2 2>&3)
    else
        password=$(dialog --passwordbox "$title" 10 50 3>&1 1>&2 2>&3)
    fi
    if [[ -n "$password" ]]; then
        echo "$password"
    else
        echo ""
    fi
}

get_content() { # Функция для отображения содержимого файла
    local title="$1"
    local file_path="$2"
    local content
    if [[ -f "$file_path" ]]; then
        content=$(<"$file_path")
        read -r width height < <(calculate_dimensions "$title" "$content")
        dialog --textbox "$file_path" "$height" "$width"
    else
        show_msg "Файл не найден: $file_path"
    fi
}

install_dependencies() { # Функция для установки зависимостей
    log "Обновление зависимостей..."
    if sudo apt-get update && sudo apt-get upgrade -y; then
        log "Обновление завершено."
    else
        log "Ошибка при обновлении пакетов."
        exit 1  # Выход при ошибке обновления
    fi

    for pkg in mc dialog; do
        if ! dpkg -l | grep -q "$pkg"; then
            log "Установка $pkg..."
            if sudo apt-get install -y "$pkg"; then
                log "$pkg успешно установлен."
            else
                log "Ошибка при установке $pkg."
                # exit 1  # Выход при ошибке установки
            fi
        else
            log "$pkg уже установлен."
        fi
    done
}

request_user_input() { # Функция для запроса параметров пользователя с помощью dialog
    USERNAME=$(get_value "Введите имя пользователя:" "$USER")
    NAME=$(get_value "Введите ваше имя:" "$NAME")
    EMAIL=$(get_value "Введите ваш email:" "$EMAIL")
    SELECTED_BASIC_DEPS=$(select_group "Выберите зависимости для установки:" BASIC_DEPS)
    if [[ " ${SELECTED_BASIC_DEPS} " =~ "php" ]]; then
        PHP_VERSION=$(select_item "Выберите версию PHP для установки" PHP_VERSIONS "8.2")
    fi

    if [[ " ${SELECTED_BASIC_DEPS} " =~ "nodejs" ]]; then
        NODE_VERSION=$(select_item "Выберите версию Node.js для установки" NODE_VERSIONS "22")
    fi

    if [[ " ${SELECTED_BASIC_DEPS} " =~ "mysql" ]]; then
        LOCAL_MYSQL_USER=$(get_value "Введите имя пользователя для MySQL:" "$LOCAL_MYSQL_USER")
        LOCAL_MYSQL_PASSWORD=$(get_value "Введите имя пользователя для MySQL:" "$LOCAL_MYSQL_PASSWORD")
    fi

    if [[ " ${SELECTED_BASIC_DEPS} " =~ "postgresql" ]]; then
        LOCAL_PGSQL_USER=$(get_value "Введите имя пользователя для MySQL:" "$LOCAL_PGSQL_USER")
        LOCAL_PGSQL_PASSWORD=$(get_value "Введите имя пользователя для MySQL:" "$LOCAL_PGSQL_PASSWORD")
    fi
}

install_selected_dependencies() { 
    log "Установка выбранных зависимостей..."
    log "Выбранные зависимости: ${SELECTED_BASIC_DEPS[@]}"  # Логирование выбранных зависимостей
    for dep in "${SELECTED_BASIC_DEPS[@]}"; do
        if [[ " $dep " =~ "nodejs" ]]; then
            log "Установка Node.js версии ${NODE_VERSION}..."
            if sudo snap install node --channel="${NODE_VERSION}" --classic; then
                log "Node.js версии ${NODE_VERSION} успешно установлен."
            else
                log "Ошибка при установке Node.js."
            fi
            sudo npm install -g npm@latest
        elif [[ " $dep " =~ "php" ]]; then
            log "Установка PHP версии $PHP_VERSION..."
            if sudo apt-get install -y "php${PHP_VERSION}" "php${PHP_VERSION}-fpm" "php${PHP_VERSION}-mysql" "php${PHP_VERSION}-pgsql"; then
                log "PHP версии $PHP_VERSION успешно установлен."
            else
                log "Ошибка при установке PHP."
            fi
        elif [[ " $dep " =~ "mysql" ]]; then
            log "Установка MySQL..."
            if sudo apt-get install -y mysql-server; then
                log "MySQL успешно установлен."
                log "Создание пользователя MySQL..."
                sudo mysql -e "CREATE USER '${LOCAL_MYSQL_USER}'@'localhost' IDENTIFIED BY '${LOCAL_MYSQL_PASSWORD}';"
                sudo mysql -e "GRANT ALL PRIVILEGES ON *.* TO '${LOCAL_MYSQL_USER}'@'localhost' WITH GRANT OPTION;"
            else
                log "Ошибка при установке MySQL."
            fi
        elif [[ " $dep " =~ "postgresql" ]]; then
            log "Установка PostgreSQL..."
            if sudo apt-get install -y postgresql; then
                log "PostgreSQL успешно установлен."
                log "Создание пользователя PostgreSQL..."
                sudo -u postgres psql -c "CREATE USER ${LOCAL_PGSQL_USER} WITH PASSWORD '${LOCAL_PGSQL_PASSWORD}';"
            else
                log "Ошибка при установке PostgreSQL."
            fi
        elif [[ " $dep " =~ "nginx" ]]; then
            log "Установка Nginx..."
            if sudo apt-get install -y nginx; then
                log "Nginx успешно установлен."
            else
                log "Ошибка при установке Nginx."
            fi
        elif [[ " $dep " =~ "apache2" ]]; then
            log "Установка Apache2..."
            if sudo apt-get install -y apache2; then
                log "Apache2 успешно установлен."
            else
                log "Ошибка при установке Apache2."
            fi
        else
            log "Установка ${deps[$dep]}..."
            if sudo apt-get install -y "${dep}"; then
                log "${deps[$dep]} успешно установлен."
            else
                log "Ошибка при установке ${deps[$dep]}."
            fi
        fi
    done
}



install_dependencies
request_user_input
install_selected_dependencies
