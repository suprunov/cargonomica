#!/bin/bash
# sudo apt update && sudo apt upgrade -y && curl -fsSL https://raw.githubusercontent.com/suprunov/cargonomica/master/installer -o installer && chmod +x installer && ./installer

# Переменные для пользователей баз данных и текущего пользователя
EMAIL="s.suprunov@cargonomica.com"
NAME="Sergey Suprunov"
LOCAL_MYSQL_USER="ssuprunov"
LOCAL_MYSQL_PASSWORD="qazqaz012"
LOCAL_PGSQL_USER="ssuprunov"
LOCAL_PGSQL_PASSWORD="qazqaz012"
DEV_SERVER_LOGIN="suprunov"
DEV_SERVER_PASSWORD="Rfkeu@495"
TEST_SERVER_LOGIN="root"
TEST_SERVER_PASSWORD="HdfyfzHfyf_2034"

# Данные репозиториев
declare -A repos
repos["crm.name"]="CRM (crm.cargonomica.com)"
repos["crm.git"]="git@gitlab:bitrix-php/crm.git"
repos["crm.local"]="${HOME}/www/crm"
repos["crm.remote"]="/home/bitrix/ext_www/p3.crm.b24dev.corp.ppricep.ru"
repos["crm.url"]="https://p3.crm.b24dev.corp.ppricep.ru"
repos["crm.common"]="false"
repos["crm.sync"]="true"
repos["crm.husky"]="true"
repos["crm.update"]="true"

repos["wagnermaier.name"]="wagnermaier (wagnermaier.com)"
repos["wagnermaier.git"]="git@gitlab:bitrix-php/wagnermaier.git"
repos["wagnermaier.local"]="${HOME}/www/wagnermaier"
repos["wagnermaier.remote"]="/home/bitrix/ext_www/p3.wagnermaier.b24dev.corp.ppricep.ru"
repos["wagnermaier.url"]="https://p3.wagnermaier.b24dev.corp.ppricep.ru"
repos["wagnermaier.common"]="false"
repos["wagnermaier.sync"]="true"
repos["wagnermaier.husky"]="true"
repos["wagnermaier.update"]="true"

# repos["main.name"]="main (cargonomica.com)"
# repos["main.git"]="git@gitlab:bitrix-php/cargonomica-main.git"
# repos["main.local"]="${HOME}/www/main"
# repos["main.remote"]="/home/bitrix/ext_www/p3.b24dev.corp.ppricep.ru"
# repos["main.url"]="https://p3.b24dev.corp.ppricep.ru"
# repos["main.common"]="false"
# repos["main.sync"]="true"
# repos["main.husky"]="true"
# repos["main.update"]="true"

repos["local.name"]="local (project/local)"
repos["local.git"]="git@gitlab:bitrix-php/core-local.git"
repos["local.local"]="${HOME}/www/_core/local"
repos["local.remote"]="/home/bitrix/p3.core/local"
repos["local.url"]=""
repos["local.common"]="true"
repos["local.sync"]="true"
repos["local.husky"]="true"
repos["local.update"]="true"

repos["bitrix.name"]="bitrix (project/bitrix)"
repos["bitrix.git"]="git@gitlab:bitrix-php/core-bitrix.git"
repos["bitrix.local"]="${HOME}/www/_core/bitrix"
repos["bitrix.remote"]="/home/bitrix/p3.core/bitrix"
repos["bitrix.url"]=""
repos["bitrix.common"]="true"
repos["bitrix.sync"]="false"
repos["bitrix.husky"]="false"
repos["bitrix.update"]="false"

repos["vendor.name"]="vendor (project/vendor)"
repos["vendor.git"]="git@gitlab:bitrix-php/core-vendor.git"
repos["vendor.local"]="${HOME}/www/_core/vendor"
repos["vendor.remote"]="/home/bitrix/p3.core/vendor"
repos["vendor.url"]=""
repos["vendor.common"]="true"
repos["vendor.sync"]="true"
repos["vendor.husky"]="false"
repos["vendor.update"]="true"

repos_list=(
    "crm" 
    "wagnermaier" 
    #"main" 
    "local" 
    "bitrix" 
    "vendor"
)

run() {
    local fn="$1"
    log "start $1"
    $fn
    log "finish $1"
}

# Функция для логирования
log() {
    local message="$1"
    local yellow='\033[1;33m'  # Желтый цвет
    local green='\033[1;32m'   # Ярко-зеленый цвет
    local reset='\033[0m'      # Сброс цвета
    echo -e "$(date +'%Y-%m-%d %H:%M:%S' | awk -v yellow="$yellow" -v reset="$reset" '{print yellow $0 reset}') - ${message}" | tee -a "${HOME}/installer.log" | awk -v green="$green" -v reset="$reset" '{print $0}' | sed "s/${message}/${green}${message}${reset}/"
}

# Функция для добавления строки в /etc/sudoers
add_sudoers_entry() {
    local user="$1"
    local entry="${user} ALL=(ALL) NOPASSWD: ALL"
    if sudo grep -q "^${entry}$" /etc/sudoers; then
        log "Запись '${entry}' уже существует в /etc/sudoers."
        return
    fi
    if [[ ! -f /etc/sudoers.bak ]]; then
        log "Создание резервной копии /etc/sudoers..."
        sudo cp /etc/sudoers /etc/sudoers.bak
    fi
    log "Добавление записи '${entry}' в /etc/sudoers..."
    echo "$entry" | sudo tee -a /etc/sudoers > /dev/null
}

# Функция для обновления системы и установки базовых пакетов
install_dependencies() {
    log "Обновление системы и установка зависимостей..."
    sudo apt-get update && sudo apt-get upgrade -y
    sudo apt-get install -y software-properties-common curl wget lsb-release apt-transport-https
    sudo apt-get install -y mc nginx mysql-server postgresql redis-server git composer logrotate supervisor rsync inotify-tools gawk wslu sshpass msmtp sshfs
    sudo add-apt-repository -y ppa:ondrej/php
    sudo apt-get update
    sudo apt-get install -y php8.2 php8.2-fpm
    sudo apt-get install -y php8.2-cli php8.2-mysql php8.2-pgsql php8.2-redis php8.2-xml php8.2-mbstring php8.2-zip php8.2-curl php8.2-gd php8.2-soap php8.2-intl php8.2-bcmath php8.2-opcache php8.2-imap php8.2-xdebug php8.2-ldap php8.2-xmlrpc php8.2-readline php8.2-msgpack php8.2-igbinary
}

# Функция для создания пользователей MySQL и PostgresSQL с полными привилегиями
create_db_users() {
    log "Создание пользователей баз данных..."
    sudo mysql -e "CREATE USER '${LOCAL_MYSQL_USER}'@'localhost' IDENTIFIED BY '${LOCAL_MYSQL_PASSWORD}';"
    sudo mysql -e "GRANT ALL PRIVILEGES ON *.* TO '${LOCAL_MYSQL_USER}'@'localhost' WITH GRANT OPTION;"
    sudo mysql -e "FLUSH PRIVILEGES;"
    sudo -u postgres psql -c "CREATE USER ${LOCAL_PGSQL_USER} WITH PASSWORD '${LOCAL_PGSQL_PASSWORD}';"
    sudo -u postgres psql -c "ALTER USER ${LOCAL_PGSQL_USER} WITH SUPERUSER;"
}

# Функция для настройки сервисов после установки
configure_services() {
    log "Настройка сервисов..."
    for service in php8.2-fpm nginx mysql postgresql redis-server supervisor; do
        sudo systemctl enable "$service"
        sudo systemctl start "$service"
    done
}

# Функция для создания файла ${HOME}/.ssh/config от имени обычного пользователя
setup_ssh() {
    log "Настройка SSH..."
    if [[ ! -f ${HOME}/.ssh/id_rsa ]]; then
        ssh-keygen -t rsa -b 4096 -C "${EMAIL}" -f "${HOME}/.ssh/id_rsa" -N ""
    else
        log "SSH-ключ уже существует."
    fi
    mkdir -p "${HOME}/.ssh"
    cat << EOF > "${HOME}/.ssh/config"
Host gitlab
    HostName gitlab.cargonomica.com
    User git
    Port 4122
    IdentityFile ${HOME}/.ssh/id_rsa
    Compression yes
    ServerAliveInterval 60
    StrictHostKeyChecking no
    UserKnownHostsFile=/dev/null
Host dev-server
    HostName 172.16.10.70
    Port 4122
    User ${DEV_SERVER_LOGIN}
    IdentityFile ${HOME}/.ssh/id_rsa
    Compression yes
    ServerAliveInterval 60
    StrictHostKeyChecking no
    UserKnownHostsFile=/dev/null
Host test-server
    HostName 172.16.10.60
    Port 4122
    User ${TEST_SERVER_LOGIN}
    IdentityFile ${HOME}/.ssh/id_rsa
    Compression yes
    ServerAliveInterval 60
    StrictHostKeyChecking no
    UserKnownHostsFile=/dev/null
EOF
    [ -d "${HOME}/.ssh" ] && chmod 700 "${HOME}/.ssh"
    [ -f "${HOME}/.ssh/id_rsa" ] && chmod 600 "${HOME}/.ssh/id_rsa"
    [ -f "${HOME}/.ssh/id_rsa.pub" ] && chmod 644 "${HOME}/.ssh/id_rsa.pub"
    [ -f "${HOME}/.ssh/authorized_keys" ] && chmod 600 "${HOME}/.ssh/authorized_keys"
    [ -f "${HOME}/.ssh/known_hosts" ] && chmod 644 "${HOME}/.ssh/known_hosts"
    [ -f "${HOME}/.ssh/config" ] && chmod 600 "${HOME}/.ssh/config"
    sshpass -p $DEV_SERVER_PASSWORD ssh-copy-id dev-server
    sshpass -p $TEST_SERVER_PASSWORD ssh-copy-id test-server
    if [[ ! -f /usr/local/bin/clip ]]; then
        sudo ln -s /mnt/c/Windows/System32/clip.exe /usr/local/bin/clip
    else
        log "Символическая ссылка /usr/local/bin/clip уже существует."
    fi
    clip < "${HOME}/.ssh/id_rsa.pub"
    wslview "https://gitlab.cargonomica.com/-/profile/keys"
    read -p -r "Нажмите [Enter], когда добавите ключ на https://gitlab.cargonomica.com/-/profile/keys..."
}

create_projects_structure() {
    log "Создание структуры проектов..."
    cd "${HOME}" || exit
    sudo chown -R "$USER:$USER" .
    [[ ! -d ${HOME}/www ]] && mkdir -p "${HOME}/www"
    cd "${HOME}/www" || exit
    scp dev-server:/home/bitrix/backup/backup.tar.gz "${HOME}/www/backup.tar.gz"
    tar -xzf backup.tar.gz
    rm -f "${HOME}/www/backup.tar.gz"
    for project in crm wagnermaier; do
        cd "${HOME}/www/$project" || exit
        ln -s ../_core/bitrix bitrix
        ln -s ../_core/local local
#        ln -s ../_core/logs logs
#        ln -s ../_core/images images
#        ln -s ../_core/upload upload
        ln -s ../_core/vendor vendor
    done
    find "${HOME}/www" -type d -exec chmod 2775 {} \;
    find "${HOME}/www" -type f -exec chmod 664 {} \;
}

update_deps() {
    sudo apt update
    sudo apt upgrade -y
    set_locale
    sudo apt install mc -y
    add_sudoers_entry "$USER"
}

git_settings() {
    for repo in "${repos_list[@]}"; do
        log "Настройка репозитория ${repos["$repo.name"]}"
        cd "${repos["$repo.local"]}" || exit
        git remote set-url origin "${repos["$repo.git"]}"
        git remote -v
        git config user.name "${NAME}"
        git config user.email "${EMAIL}"
        git config color.ui auto
        git config advice.ignoredHook false
        cat << EOF > "${repos["$repo.local"]}/.git/hooks/post-checkout"
#!/bin/bash
find . -type f -exec chmod 664 {} \;
find . -type d -exec chmod 2775 {} \;
EOF
        chmod +x "${repos["$repo.local"]}/.git/hooks/post-checkout"
        cat << EOF > "${repos["$repo.local"]}/.git/hooks/prepare-commit-msg"
#!/bin/bash
BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
COMMIT_MSG_FILE=$1
if ! grep -q "\[$BRANCH_NAME\]" "$COMMIT_MSG_FILE"; then
  sed -i.bak -e "1s|^|[$BRANCH_NAME] |" "$COMMIT_MSG_FILE"
fi
EOF
        chmod +x "${repos["$repo.local"]}/.git/hooks/prepare-commit-msg"
        cd "${repos["$repo.local"]}" || exit
        if [ "${repos["$repo.update"]}" = "true" ]; then
            git checkout .
            git clean -df
            git fetch --all
            git checkout -B develop origin/develop
        fi
        сat << EOF > "${repos["${repo}.local"]}/.nogsync"
logs/
*.log
*.tmp
bitrix/
upload/
EOF
        if [ "${repos["$repo.sync"]}" = "true" ]; then
            cat << EOF > "${HOME}/gsync/.${repo}.gsync"
[OPTIONS]
source="${repos["${repo}.local"]}"
target="dev-server:${repos["${repo}.remote"]}" 
links=true
perms=false 
times=true 
group=false
owner=false
EOF
            cat << EOF > "${HOME}/gsync/gsync-${repo}.conf"
[program:gsync-${repo}]
command=${HOME}/gsync/gsync --config=${HOME}/gsync/.${repo}.gsync
autostart=true
autorestart=true
stderr_logfile=/var/log/gsync-${repo}.err.log
stdout_logfile=/var/log/gsync-${repo}.out.log
EOF
            sudo cp -f "${HOME}/gsync/gsync-${repo}.conf" "/etc/supervisor/conf.d/gsync-${repo}.conf"
            log "Для запуска синхронизации выполнить команды:"
            log "sudo supervisorctl reread"
            log "sudo supervisorctl update"
            log "sudo supervisorctl start gsync-${repo}"
        fi
    done
}

set_locale() {
    sudo locale-gen ru_RU.UTF-8
    sudo update-locale LANG=ru_RU.UTF-8
    sudo tee /etc/default/console-setup > /dev/null << EOF
CHARMAP="UTF-8"
CODESET="CyrSlav"
FONTFACE="Terminus"
FONTSIZE="16x32"
EOF
    sudo tee /etc/default/keyboard > /dev/null << EOF
XKBLAYOUT="us,ru"
XKBVARIANT=""
XKBOPTIONS="grp:alt_shift_toggle"
EOF
    sudo dpkg-reconfigure console-setup
    echo 'export LANG=ru_RU.UTF-8' >> "${HOME}/.bashrc"
    git config --global i18n.commitEncoding "UTF-8"
    git config --global i18n.logOutputEncoding "UTF-8"
    curl -o "${HOME}/.git-prompt.sh https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh"
    cat << EOF >> ~/.bashrc
# Git Prompt Script
source "$HOME/.git-prompt.sh"
export GIT_PS1_SHOWDIRTYSTATE=true  # Показывать символы для незакоммиченных изменений
export GIT_PS1_SHOWSTASHSTATE=true   # Показывать состояние стэша
export GIT_PS1_SHOWUNTRACKEDFILES=true  # Показывать неотслеживаемые файлы
export GIT_PS1_SHOWUPSTREAM="auto"   # Показывать состояние upstream
# Настройка цветной командной строки
export PS1='\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]$(__git_ps1 " (\[\033[31m\]%s\[\033[00m\])")\$ '
EOF
    source "${HOME}/.bashrc"
}

install_node() {
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash
    nvm install 22
    node -v
    npm -v
    curl -fsSL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
    echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
    sudo apt update
    sudo apt install -y yarn
}

install_rsync() {
    git clone https://github.com/e-bash/gsync.git "${HOME}/gsync"
    chmod +x "${HOME}/gsync/gsync"
}

# Функция для клонирования репозиториев и настройки окружения
setup_projects() {
    log "Клонирование репозиториев и настройка окружения..."
    for project in "${repos_list[@]}"; do
        if [[ ! -d "${repos["$project.local"]}" ]]; then
            git clone "${repos["$project.git"]}" "${repos["$project.local"]}"
        else
           log "Репозиторий '${repos["$project.name"]}' уже склонирован."
        fi
        pushd "${repos["$project.local"]}" > /dev/null || exit
        git reset --hard
        git pull
        git config user.name "$NAME"
        git config user.email "$EMAIL"
        if [[ "${repos["$project.husky"]}" == "true" && ! -f "${HOME}/.husky/_/husky.sh" ]]; then
            npx husky install
        else
            log "Husky уже настроен."
        fi
        if [[ -f ${HOME}/www/${repos["$project.local"]}/composer.json ]]; then
            composer install --ignore-platform-reqs
        else
            log "Файл composer.json отсутствует."
        fi
        if [[ -f ${HOME}/www/${repos["$project.local"]}/package.json ]]; then
            yarn install --network-timeout=100000
        else
            log "Файл package.json отсутствует."
        fi
        [[ "${repos["$project.update"]}" == "true" ]] && yarn upgrade --latest
        popd > /dev/null || exit
    done
    yarn global add gulp-cli || log "gulp-cli уже установлен."
}

mount_sshfs() {
    mkdir -p ~/remote_mount
    sshfs user@example.com:/var/www ~/remote_mount
    # fusermount -u ~/remote_mount # размонтирование linux
    # umount ~/remote_mount # размонтирование macos
}

# Выполнение всех действий
log "Начинаю выполнение скрипта..."
run update_deps
run install_dependencies
run install_node
run create_db_users
run configure_services
run setup_ssh
run create_projects_structure
run install_rsync
run git_settings
log "Скрипт выполнен успешно."
